{"version":3,"sources":["utils/socket.js","Loader.js","IntroPanel.js","App.js","utils/throttle.js","serviceWorker.js","index.js"],"names":["socket","io","query","type","Loader","id","className","version","xmlns","viewBox","d","MOBILE_GAMEPAD_URL","IntroPanel","serverReady","useState","hideOverlay","setHideOverlay","classnames","hide","onClick","UNITY_BUILD_PATH","WIDTH_TO_HEIGHT","LoadingServer","App","gameContainer","useRef","isLoadingServer","setIsLoadingServer","resizeCanvas","canvas","document","getElementById","width","current","offsetWidth","height","useEffect","emit","Promise","resolve","on","close","then","window","UnityLoader","instantiate","onProgress","UnityProgress","Module","onRuntimeInitialized","setTimeout","addEventListener","fn","limit","waiting","args","apply","throttle","ref","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TAIaA,E,MAASC,GADA,0CACS,CAC7BC,MAAO,CACLC,KAAM,Y,YCHH,SAASC,IACd,OACE,yBAAKC,GAAG,gBAAgBC,UAAU,SAASC,QAAQ,MAAMC,MAAM,6BAA6BC,QAAQ,iBACnG,0BAAMJ,GAAG,WAAWK,EAAE,uH,2BCFrBC,EAAqB,yBAEpB,SAASC,EAAT,GAA8C,IAAD,IAAvBC,mBAAuB,WACZC,oBAAS,GADG,mBAC3CC,EAD2C,KAC9BC,EAD8B,KASlD,OACE,yBAAKV,UAAWW,IAAW,kBAAmB,CAAEC,KAAMH,IAAgBI,QAPxE,WACMN,GACFG,GAAe,KAMf,6BAASV,UAAWW,IAAW,QAAS,CAAEC,MAAOL,GAAeE,KAC9D,oDACA,2MAGA,4IACgH,2BAAIJ,GADpH,yHAGA,4KAGA,yDCrBR,IAAMS,EAAmB,eACnBC,EAAkB,KAExB,SAASC,IACP,OACE,yBAAKhB,UAAU,kBACb,wBAAIA,UAAU,kBAAd,kBACA,kBAAC,EAAD,OAgDSiB,MA3Cf,WACE,IAAMC,EAAgBC,mBADT,EAEiCX,oBAAS,GAF1C,mBAENY,EAFM,KAEWC,EAFX,KAIb,SAASC,IACP,IAAMC,EAASC,SAASC,eAAe,WACvC,GAAKF,EAAL,CAFsB,IAMDG,EADDR,EAAZS,QACAC,YACRL,EAAOG,MAAQA,EACfH,EAAOM,OAASd,EAAkBW,GAsBpC,OAnBAI,qBAAU,YHvBVpC,EAAOqC,KAAK,cACL,IAAIC,SAAQ,SAACC,GAClBvC,EAAOwC,GAAG,OAAO,WACfxC,EAAOyC,QACPF,WGoBiBG,MAAK,WACtBf,GAAmB,GACnBgB,OAAOC,YAAYC,YACjB,gBADF,UAEKzB,EAFL,oBAGE,CACE0B,WAAYH,OAAOI,cACnBC,OAAQ,CACNC,qBAAsB,WACpBC,WAAWtB,UAMrBe,OAAOQ,iBAAiB,SClDrB,SAAkBC,EAAIC,GAAQ,IAAD,OAC9BC,GAAU,EACd,OAAO,WACL,IAAKA,EAAS,CAAC,IAAD,uBADLC,EACK,yBADLA,EACK,gBACZH,EAAGI,MAAM,EAAMD,GACfD,GAAU,EACVJ,YAAW,WACTI,GAAU,IACTD,KD0C6BI,CAAS7B,EAAc,QACxD,IAGD,0BAAMtB,UAAU,QACd,yBAAKD,GAAG,gBAAgBC,UAAU,iBAAiBoD,IAAKlC,IACxD,kBAAC,EAAD,CAAYX,aAAca,IACzBA,GAAmB,kBAACJ,EAAD,QE7CNqC,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlC,SAASC,eAAe,SD2H3C,kBAAmBkC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.3fa05a80.chunk.js","sourcesContent":["import io from 'socket.io-client';\n\nconst isProd = process.env.NODE_ENV === 'production';\nconst host = isProd ? 'https://young-gorge-52676.herokuapp.com' : 'http://localhost:52300';\nexport const socket = io(host, {\n  query: {\n    type: 'loader'\n  }\n});\n\nexport function pingServerSocket() {\n  socket.emit('pingServer');\n  return new Promise((resolve) => {\n    socket.on('ack', () => {\n      socket.close();\n      resolve();\n    });\n  });\n}\n","import React from 'react';\nimport './Loader.css';\n\nexport function Loader() {\n  return (\n    <svg id=\"inf-container\" className=\"loader\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-20 0 300 150\">\n\t    <path id=\"infinity\" d=\"M60,9.4c-66.2,0-66.2,97.3,0,97.3c71.8,0,71.7-97.3,145-97.3c62.7,0,62.7,97.3,0,97.3\n\t\tC131.8,106.8,131.8,9.4,60,9.4z\"/>\n\t  </svg>\n  );\n}\n","import React, {useState} from 'react';\nimport './IntroPanel.css';\nimport classnames from 'classnames';\n\nconst MOBILE_GAMEPAD_URL = 'bit.ly/virtual-gamepad';\n\nexport function IntroPanel({ serverReady = false }) {\n  const [hideOverlay, setHideOverlay] = useState(false);\n\n  function handleClickOverlay() {\n    if (serverReady) {\n      setHideOverlay(true);\n    }\n  }\n\n  return (\n    <div className={classnames('panel-container', { hide: hideOverlay })} onClick={handleClickOverlay}>\n      <section className={classnames('panel', { hide: !serverReady || hideOverlay })}>\n        <h2>Virtual Couch Gaming</h2>\n        <p>\n          This is a proof of concept multiplayer couch game. You can play local multiplayer or have a friend boot up the link from another desktop and play from a different location.\n        </p>\n        <p>\n          Regardless of how you play multiplayer, you control the pong paddles with your phone. To get started, open up <b>{MOBILE_GAMEPAD_URL}</b> from your mobile device (Chrome works best). Once loaded, enter the client ID from your desktop to control a paddle.\n        </p>\n        <p>\n          To move the paddle, tilt your phone left and right in landscape mode. If your paddle movement is inverted, you may want to rotate your phone.\n        </p>\n        <p>\n          Click anywhere to begin!\n        </p>\n      </section>\n    </div>\n  );\n}","import React, { useEffect, useRef, useState } from 'react';\nimport { pingServerSocket } from './utils/socket';\nimport { throttle } from './utils/throttle';\nimport './App.css';\nimport { Loader } from './Loader';\nimport { IntroPanel } from './IntroPanel';\n\nconst UNITY_BUILD_PATH = 'unity-build/';\nconst WIDTH_TO_HEIGHT = 600 / 960;\n\nfunction LoadingServer() {\n  return (\n    <div className=\"loading-server\">\n      <h3 className=\"loading-header\">Loading Server</h3>\n      <Loader />\n    </div>\n  );\n}\n\nfunction App() {\n  const gameContainer = useRef();\n  const [isLoadingServer, setIsLoadingServer] = useState(true);\n\n  function resizeCanvas() {\n    const canvas = document.getElementById('#canvas');\n    if (!canvas) {\n      return;\n    }\n    const { current } = gameContainer;\n    const { offsetWidth: width } = current;\n    canvas.width = width;\n    canvas.height = WIDTH_TO_HEIGHT * width;\n  }\n\n  useEffect(() => {\n    pingServerSocket().then(() => {\n      setIsLoadingServer(false);\n      window.UnityLoader.instantiate(\n        \"gameContainer\",\n        `${UNITY_BUILD_PATH}Build/build.json`,\n        {\n          onProgress: window.UnityProgress,\n          Module: {\n            onRuntimeInitialized: () => {\n              setTimeout(resizeCanvas);\n            }\n          }\n        }\n      );\n    });\n    window.addEventListener('resize', throttle(resizeCanvas, 100));\n  }, []);\n\n  return (\n    <main className=\"pong\">\n      <div id=\"gameContainer\" className=\"game-container\" ref={gameContainer} />\n      <IntroPanel serverReady={!isLoadingServer}/>\n      {isLoadingServer && <LoadingServer />}\n    </main>\n  );\n}\n\nexport default App;\n","export function throttle(fn, limit) {  \n  let waiting = false\n  return (...args) => {\n    if (!waiting) {\n      fn.apply(this, args)\n      waiting = true\n      setTimeout(() => {\n        waiting = false\n      }, limit)\n    }\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}